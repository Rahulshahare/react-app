{"version":3,"sources":["component/redux/action.js","component/courses/createCourse.js","component/home/home.js","component/about/about.js","component/courses/courses.js","component/users/user.js","counter/counter.js","component/notFound/404.js","component/common/navbar.js","component/router/router.js","component/redux/reducer.js","component/redux/courseReduer.js","component/redux/userReducer.js","component/redux/store.js","App.js","serviceWorker.js","index.js","component/redux/actionTypes.js"],"names":["addNewCourse","coursename","type","actionType","payload","resetCourse","deleteCourse","addNewUser","user","CreateCoursePage","props","handleChange","e","setState","courseName","target","value","handleSubmit","preventDefault","a","state","length","console","log","courses","handleReset","handleDelete","className","onSubmit","this","htmlFor","onChange","id","onClick","ListCourse","React","Component","mapDispatchToProps","map","course","i","key","connect","HomePage","to","AboutPage","lazy","CoursePage","fallback","User","getUser","fetch","then","response","ok","json","catch","err","text","errorMessage","isLoading","users","CreateCard","username","name","company","catchPhrase","email","phone","address","suite","street","city","website","Counter","count","increaseCount","bind","decreaseCount","Page404","Navbar","activeClassName","Routers","exact","path","component","render","reducer","combineReducers","action","concat","filter","n","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","ADD_NEW_COURSE","RESET_COURSE","DELETE_COURSE","ADD_NEW_USER"],"mappings":"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","file":"static/js/main.e8f5d170.chunk.js","sourcesContent":["import * as actionType from './actionTypes';\nexport const addNewCourse = (coursename) =>({\n    type: actionType.ADD_NEW_COURSE,\n    payload:{\n        coursename\n    }\n})\n\nexport const resetCourse = () =>({\n    type: actionType.RESET_COURSE\n})\n\nexport const deleteCourse = (coursename) =>({\n    type: actionType.DELETE_COURSE,\n    payload:{\n        coursename\n    }\n})\n\n/**\n * Action for userREducer\n */\n\nexport const addNewUser = (user) =>({\n    type: actionType.ADD_NEW_USER,\n    payload:{\n        user\n    }\n})\n\n","import React from 'react';\nimport { connect } from 'react-redux';\n// import store from '../redux/store';\nimport { addNewCourse, resetCourse, deleteCourse } from '../redux/action';\n\n/**\n * course list is only available for this component only. if this component re-render \n * course list will be empty and initialize again.\n * so te course list wi not be available through the app.\n * To use course list data in whole app the redux is require.\n * Using Redux it is possible to make courseList available for whole app.\n * So lets get started with Redux\n */\nclass CreateCoursePage extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            courseName:'',\n            \n        }\n    }\n    handleChange = (e) =>{\n        this.setState({\n            courseName:e.target.value\n        })\n    }\n    handleSubmit = (e) =>{\n        e.preventDefault()\n        var a = this.state.courseName;\n        if(a.length === 0){\n            return;\n        }\n       // store.dispatch( addNewCourse(a))\n        this.props.addNewCourse(a)\n        console.log(this.props.courses);\n        \n        this.setState({\n            courseName:''\n        })\n    }\n    handleReset = ()=>{\n        this.props.resetCourse();\n        this.setState({\n            courseName:''\n        })\n    }\n    handleDelete = (coursename)=>{\n        console.log(coursename)\n        this.props.deleteCourse(coursename)\n\n    }\n    render(){\n        return(\n            <div className=\"col-6\">\n                \n                <h4>Add New Course Here</h4>\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"course\">Course</label>\n                        <input type=\"text\" onChange={this.handleChange} value={this.state.courseName} className=\"form-control\" id=\"course\"/>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                    <button type=\"reset\" onClick={this.handleReset} className=\"btn btn-secondary\">Reset</button>\n                </form>\n                <br/>\n                {   !this.props.courses\n                    ? ''\n                    :\n                    <ListCourse \n                        courses = {this.props.courses} \n                        handleDelete = {this.handleDelete}\n                    />\n                }\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state /*,ownProps*/)=>{\n    return{\n        courses:state.courses\n    }\n}\n\nconst mapDispatchToProps = { addNewCourse, deleteCourse, resetCourse };\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CreateCoursePage);\n\nfunction ListCourse(props){\n    // console.log(courses)\n    return(\n        <ul className=\"list-group\">\n                {\n                    props.courses.map((course, i) =>(\n                        <li key={i} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                            {i+1+'. '}\n                            {course}\n                            <button \n                                onClick={()=> props.handleDelete(course)} \n                                type=\"button\" \n                                className=\"btn btn-danger btn-sm\"\n                            >Remove</button>\n                        </li>\n                    ))\n                }\n        </ul>\n    )\n    \n\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport CreateCoursePage from '../courses/createCourse';\n\nexport default class HomePage extends React.Component{\n    render(){\n        return(\n            <div>\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-4\">Welcome To LocalOlx</h1>\n                <p className=\"lead\">Showcase your product from Galli to Delhi</p>\n                <hr className=\"my-4\"/>\n                <p>Here Testing Redux. data can flow through app.below component have a data</p>\n                <Link to=\"/about\" className=\"btn btn-primary btn-lg\">Home</Link>\n            </div>\n            <CreateCoursePage/>\n            </div>\n        );\n    }\n    \n}\n","import React from 'react'\n\nexport default class AboutPage extends React.Component{\n    render(){\n        return(\n            <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">Fluid jumbotron</h1>\n                <p className=\"lead\">This is a modified jumbotron that occupies the entire horizontal space of its parent.</p>\n            </div>\n            </div>\n        )\n    }\n}","import React, { Suspense } from 'react';\nconst CreateCoursePage = React.lazy(()=>import('./createCourse'));\n\nfunction CoursePage (){\n    return(\n        <div>\n            <div className=\"jumbotron jumbotron-fluid\">\n                <div className=\"container\">\n                    <h1 className=\"display-4\">Courses</h1>\n                    <p className=\"lead\">We can Create list of Courses here</p>\n                </div>\n            </div>\n            <Suspense fallback={<div>Loading...</div>}>\n                <CreateCoursePage/>\n            </Suspense>\n        </div>\n    )\n}\n\nexport default CoursePage;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addNewUser} from  '../redux/action';\n//import store from '../redux/store'; \n\nclass User extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            isLoading:false,\n            users:[],\n        }\n    }\n    \n    getUser = ()=>{\n\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then( response => {\n                    if (!response.ok) { throw response }\n                    return response.json()  //we only get here if there is no error\n            })\n            .then( json => {\n                    // store.dispatch(addNewUser(json))\n                    this.props.addNewUser(json)        \n                })\n            .catch( err => {\n                    err.text().then( errorMessage => {\n                    // this.props.dispatch(displayTheError(errorMessage))\n                        this.setState({\n                            isLoading:true\n                        })\n                    })\n            })\n         \n        \n    }\n    render(){   \n        \n                // this.setState({\n                //     users: this.props.users\n                // })\n        \n        return(\n            <div>\n                <div className=\"jumbotron jumbotron-fluid\">\n                    <div className=\"container\">\n                        <h1 className=\"display-4\">Users</h1>\n                        <p className=\"lead\">fatching users from server using redux and working on</p>\n                        <button onClick={this.getUser} className=\"btn btn-primary btn-sm\">{!this.state.isLoading ? \"Load data\" :\"Loading Fail, Try Again\"}</button>\n                    </div>\n                </div>\n                <div>\n                {\n                   \n                        // console.log(\"Store Change\", store.getState());\n                        !this.props.users ? '' :\n                        <CreateCard users={this.props.users}/>\n                \n                    \n                }\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state /*,ownProps */) =>{\n    return{\n        users: state.users\n    }\n}\n\nconst mapDispatchToProps = { addNewUser }\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(User)\n\n\n\nfunction CreateCard(props){\n    return(\n        <div className=\"row\">\n            {\n                props.users.map((user, i) =>(\n                    <div key={i} className=\"col-lg-3 col-md-4 col-6 col-xs-12\">\n                        <div className=\"card bg-light mb-3\">\n                            <div className=\"card-header\">{user.username}</div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{user.name}</h5>\n                                <p className=\"card-text\">{user.company.catchPhrase} at {user.company.name}</p>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group item\">Email : {user.email}</li>\n                                    <li className=\"list-group item\">Phone :{user.phone}</li>\n                                    <li className=\"list-group item\">Address : {user.address.suite},{user.address.street},{user.address.city}</li>\n                                </ul>\n                            </div>\n                            <div className=\"card-footer\">\n                                <small className=\"text-muted\">{user.website}</small>\n                            </div>\n                        </div>\n                    </div>\n                ))\n            }\n\n        </div>\n    )\n}","import React from 'react';\nimport './counter.css';\n/**Ready */\nexport default class Counter extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            count:0\n        }\n        this.increaseCount = this.increaseCount.bind(this);\n        this.decreaseCount = this.decreaseCount.bind(this);\n    }\n    increaseCount(){\n        this.setState({\n            count: this.state.count + 1\n        })\n    }\n    decreaseCount(){\n        this.setState({\n            count: this.state.count - 1\n        })\n    }\n    render(){\n        return(\n            <div className=\"counter\">\n                <div>\n                    <button className=\"btn btn-primary\" onClick={this.increaseCount}>+</button>\n                        <span className=\"count\">{this.state.count}</span>\n                    <button className=\"btn btn-primary\" onClick={this.decreaseCount}>-</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport {Link } from 'react-router-dom';\n\nfunction Page404(){\n    return(\n        <div className=\"jumbotron jumbotron-fluid\">\n            <div className=\"container\">\n                <h1 className=\"display-4\">its 404</h1>\n                <p className=\"lead\">The page you are looking for is not found.</p>\n                <Link to=\"/\" className=\"btn btn-primary btn-lg\">Home</Link>\n            </div>\n        </div>\n    )\n}\nexport default Page404;","import React from 'react';\nimport { NavLink , } from 'react-router-dom';\n\nfunction Navbar(){\n    return(\n        <nav className=\"nav\">\n            <NavLink to=\"/\" className=\"nav-link\" activeClassName=\"active\">Home</NavLink>\n            <NavLink to=\"/about\" className=\"nav-link\" activeClassName=\"active\">About</NavLink>\n            <NavLink to=\"/courses\" className=\"nav-link\" activeClassName=\"active\">Courses</NavLink>\n            <NavLink to=\"/user\" className=\"nav-link\" activeClassName=\"active\">Users</NavLink>\n            <NavLink to=\"/counter\" className=\"nav-link\" activeClassName=\"active\">Counter</NavLink>\n            <NavLink to=\"/something\" className=\"nav-link\" activeClassName=\"active\">404</NavLink>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch  } from 'react-router-dom';\nimport HomePage from '../home/home';\nimport AboutPage from '../about/about';\nimport CoursePage from '../courses/courses';\nimport User from '../users/user';\nimport Counter from '../../counter/counter';\nimport Page404 from '../notFound/404';\nimport Navbar from '../common/navbar';\n\nexport default class Routers extends React.Component{\n    render(){\n        return(\n            <Router>\n                <div className=\"container-fluid\">\n                    <Navbar/>\n                    <div className=\"row\">\n                        <div className=\"col-12\">\n                            <Switch>\n                                <Route exact={true} path=\"/\" component={HomePage}></Route>\n                                <Route path=\"/about\" component={AboutPage}></Route>\n                                <Route path=\"/courses\" render={() => <CoursePage/>}></Route>\n                                <Route path=\"/user\" component={User}></Route>\n                                <Route path=\"/counter\" component={Counter}></Route>\n                                <Route path=\"*\" component={Page404}></Route>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </Router>\n        )\n    }\n}","import { combineReducers } from 'redux';\nimport courses from './courseReduer';\nimport users from './userReducer';\n\nconst reducer = combineReducers({\n    courses,\n    users\n})\n\n\nexport default reducer;","import * as actionType from './actionTypes';\n\nexport default function reducer(state = [], action){\n\n    switch(action.type){\n        case actionType.ADD_NEW_COURSE:\n            // return[\n            //     ...state,\n            //     action.payload.coursename\n            // ]\n            return state.concat(action.payload.coursename)\n\n        case actionType.DELETE_COURSE:\n            // console.log( action.payload.coursename);\n            return state.filter(n => n !== action.payload.coursename)\n        \n\n        case actionType.RESET_COURSE :\n            return state = [];\n\n        default:\n            return state;\n    }\n}","import * as actionType from './actionTypes';\n\nexport default function UserReducer(state = [], action){\n\n    switch(action.type){\n        case actionType.ADD_NEW_USER:\n            return state = action.payload.user\n\n        default: return state\n    }\n\n}","import { createStore } from 'redux';\nimport reducer from './reducer';\n\nconst store = createStore(reducer);\n\nexport default store;","import React from 'react';\nimport  'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Routers from './component/router/router';\nimport { Provider } from 'react-redux';\nimport store from './component/redux/store';\n\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <Routers/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n *  A Constnt value for action Types\n */\nexport const ADD_NEW_COURSE = 'addingCourse';\nexport const RESET_COURSE = 'resetCourse';\nexport const DELETE_COURSE = 'deletingCourse';\n\n/**\n * Action Type for Users\n */\n\n export const ADD_NEW_USER = 'ADD_NEW_USER';"],"sourceRoot":""}